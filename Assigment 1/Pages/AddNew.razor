@page "/AddNew"
@attribute [Authorize(Policy = "SecurityLevel2")]
@using Assigment_1.Data
@using Models
@inject ICloudAdultInterface CloudAdultInterface
@inject NavigationManager NavigationManager;


<h3>AddNew</h3>

<div class="container p-3 my-3">

    <h1>Add New Adult</h1>
    <p>@ErrorMessage</p>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="fName" name="fname" id='fname' required @bind="@FirstName" @oninput="@((e) => { FirstName = (string) e.Value; })"/>
        <label for="fname" class="form__label">First name:</label>
    </div>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="lName" name="lname" id='lname' required @bind="@LastName" @oninput="@((e) => { LastName = (string) e.Value; })"/>
        <label for="lname" class="form__label">Last name:</label>
    </div>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="hairColour" name="hairColour" id='hairColour' required @bind="@HairColor" @oninput="@((e) => { HairColor = (string) e.Value; })"/>
        <label for="hairColour" class="form__label">Hair colour:</label>
    </div>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="eyeColour" name="eyeColour" id='eyeColour' required @bind="@EyeColor" @oninput="@((e) => { EyeColor = (string) e.Value; })"/>
        <label for="eyeColour" class="form__label">Eye colour:</label>
    </div>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="age" name="age" id='age' required @bind="@Age" @oninput="@((e) => { Age = (string) e.Value; })"/>
        <label for="age" class="form__label">Age:</label>
    </div>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="weight" name="weight" id='weight' required @bind="@Weight" @oninput="@((e) => { Weight = (string) e.Value; })"/>
        <label for="weight" class="form__label">Weight:</label>
    </div>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="height" name="height" id='height' required @bind="@Height" @oninput="@((e) => { Height = (string) e.Value; })"/>
        <label for="height" class="form__label">Height:</label>
    </div>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="sex" name="sex" id='sex' required @bind="@Sex" @oninput="@((e) => { Sex = (string) e.Value; })"/>
        <label for="sex" class="form__label">Sex:</label>
    </div>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="jobTitle" name="jobTitle" id='jobTitle' required @bind="@JobTitle" @oninput="@((e) => { JobTitle = (string) e.Value; })"/>
        <label for="jobTitle" class="form__label">Job title:</label>
    </div>
    <div class="form__group field">
        <input type="text" class="form__field" placeholder="salary" name="salary" id='salary' required @bind="@Salary" @oninput="@((e) => { Salary = (string) e.Value; })"/>
        <label for="salary" class="form__label">Salary:</label>
    </div>
    <div class="wrap">
        <input id="submitButton" type="submit" value="Submit" @onclick="Edit">
    </div>
</div>

@code {
    public string ErrorMessage { get; set; }
    public IList<Adult> Adults { get; set; }

    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string HairColor { get; set; }
    public string EyeColor { get; set; }
    public string Age { get; set; }
    public string Weight { get; set; }
    public string Height { get; set; }
    public string Sex { get; set; }
    public string JobTitle { get; set; }
    public string Salary { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Add New");
        Adults = await CloudAdultInterface.GetAdultAsync();
    }

    public async void Edit()
    {
        if (Check(FirstName) || Check(LastName) || Check(Age) || Check(HairColor) || Check(EyeColor) || Check(Weight) || Check(Height))
        {
            ErrorMessage = "Please fill all fields";
        }
        else
        {
            Adult adult = new Adult
            {
                Id = Adults.Count,
                FirstName = FirstName,
                LastName = LastName,
                Age = Int32.Parse(Age),
                Height = Int32.Parse(Height),
                Weight = float.Parse(Weight),
                Sex = Sex,
                EyeColor = EyeColor,
                HairColor = HairColor,
            };
            if (!Check(JobTitle))
            {
                Job job = new Job
                {
                    JobTitle = JobTitle,
                    Salary = Int32.Parse(Salary)
                };
                adult.JobTitle = job;
            }
            else
            {
                Job job = new Job
                {
                    JobTitle = "Unemployed",
                    Salary = 0
                };
                adult.JobTitle = job;
            }

            await CloudAdultInterface.AddAdultAsync(adult);
            NavigationManager.NavigateTo("/fetchdata");
        }
    }

    public bool Check(string stringToCheck)
    {
        return string.IsNullOrEmpty(stringToCheck) ? true : false;
    }

}