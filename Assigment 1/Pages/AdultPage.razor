@page "/AdultPage"
@page "/AdultPage/{Id:int}" 
@attribute [Authorize(Policy = "SecurityLevel4")]

@using Assigment_1.Data
@using Models
@inject ICloudAdultInterface CloudAdultInterface
@inject NavigationManager NavigationManager;
<h3>Adult Info Page</h3>

@if (Adult == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="@mainClass">
        <label for="fname">First name:</label><br>
        <input type="text" @bind="@Adult.FirstName" @oninput="@((e) => { Adult.FirstName = (string) e.Value; })"><br>
        <label for="lname">Last name:</label><br>
        <input type="text" @bind="@Adult.LastName" @oninput="@((e) => { Adult.LastName = (string) e.Value; })"><br>
        <label for="lname">HairColor:</label><br>
        <input type="text" @bind="@Adult.HairColor" @oninput="@((e) => { Adult.HairColor = (string) e.Value; })"><br>
        <label for="lname">EyeColor:</label><br>
        <input type="text" @bind="@Adult.EyeColor" @oninput="@((e) => { Adult.EyeColor = (string) e.Value; })"><br>
        <label for="lname">Age:</label><br>
        <input type="text" @bind="@Adult.Age" @oninput="@((e) => { Adult.Age = (int) e.Value; })"><br>
        <label for="lname">Weight:</label><br>
        <input type="text" @bind="@Adult.Weight" @oninput="@((e) => { Adult.Weight = (float) e.Value; })"><br>
        <label for="lname">Height:</label><br>
        <input type="text" @bind="@Adult.Height" @oninput="@((e) => { Adult.Height = (int) e.Value; })"><br>
        <label for="lname">Sex:</label><br>
        <input type="text" @bind="@Adult.Sex" @oninput="@((e) => { Adult.Sex = (string) e.Value; })"><br>
        <label for="lname">JobTitle:</label><br>
        <input type="text" @bind="@Adult.JobTitle.JobTitle" @oninput="@((e) => { Adult.JobTitle.JobTitle = (string) e.Value; })"><br>
        <label for="lname">Salary:</label><br>
        <input type="text" @bind="@Adult.JobTitle.Salary" @oninput="@((e) => { Adult.JobTitle.Salary = (int) e.Value; })"><br>
        <input type="submit" value="Submit edited" @onclick="Edit">
        <div >
            <input type="submit" value="Remove" @onclick="Remove">
        </div>
    </div>
    <div class="@secondaryClass">
        <p>Are you sure you want to delete @Adult.FirstName @Adult.LastName</p>
        <div >
            <input type="submit" value="Confirm" @onclick="Confirm">

            <input type="submit" value="GoBack" @onclick="Remove">
        </div>
    </div>
}

@code {
    string mainClass { get; set; }
    string secondaryClass { get; set; }
    
    public Adult Adult { get; set; }

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("AdultPage");
        secondaryClass = "hidden";
        mainClass = "";
        {
            IList<Adult> Adults = await CloudAdultInterface.GetAdultAsync();
            Adult = Adults.First(p => p.Id == Id);
            if (Check(Adult.JobTitle.JobTitle))
            {
                Job job = new Job
                {
                    JobTitle = "Unemployed",
                    Salary = 0
                };
                Adult.JobTitle = job;
            }
        }
    }

    public async void Edit()
    {
        await CloudAdultInterface.UpdateAsync(Adult);
        NavigationManager.NavigateTo("/fetchdata");
    }


    private void Remove()
    {
        if (!mainClass.Equals("hidden"))
        {
            secondaryClass = "";
            mainClass = "hidden";
        }
        else
        {
            secondaryClass = "hidden";
            mainClass = "";
        }
    }

    private async void Confirm()
    {
        await CloudAdultInterface.RemoveAdultAsync(Adult.Id);
        mainClass = "";
        NavigationManager.NavigateTo("/fetchdata");
    }

    public bool Check(string stringToCheck)
    {
        return string.IsNullOrEmpty(stringToCheck) ? true : false;
    }

}